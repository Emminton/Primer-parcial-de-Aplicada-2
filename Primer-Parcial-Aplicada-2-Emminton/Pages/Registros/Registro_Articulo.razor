@page "/Articulo"
@page "/Producto"

@using Primer_Parcial_Aplicada_2_Emminton.BLL
@using Primer_Parcial_Aplicada_2_Emminton.Models

@inject IToastService toast

<EditForm Model="articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <section class="form-register">

        <div class="card">

            <div class="card-header">
                <h3>Registro De Artículo</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="form-group">
                            <label>Producto ID:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="articulo.ArticuloId" class="form-control " />
                                <ValidationMessage For="(() => articulo.ArticuloId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <di class="form-group">
                        <label>Descripción:</label>
                        <InputText @bind-Value="articulo.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => articulo.Descripcion)" />
                    </di>

                    <div class="form-group">
                        <label>Existencia</label>
                        <InputNumber @bind-Value="articulo.Existencia" @oninput="Calcularinventario" @onfocus="Calcularinventario" @onfocusin="Calcularinventario" @onfocusout="Calcularinventario" @onchange="Calcularinventario" class="form-control"></InputNumber>
                        <ValidationMessage For="(()=> articulo.Existencia)"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Costos</label>
                        <InputNumber @bind-Value="articulo.Costo" @oninput="Calcularinventario" @onfocus="Calcularinventario" @onfocusin="Calcularinventario" @onfocusout="Calcularinventario" @onchange="Calcularinventario" class="form-control"></InputNumber>
                        <ValidationMessage For="(()=> articulo.Costo)"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Valor Inventario:</label>
                        <InputNumber @bind-Value="articulo.ValorInventario" class="form-control" readonly="true" />
                        <ValidationMessage For="@(() => articulo.ValorInventario)" />
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>

        </div>

    </section>


</EditForm>

@code {
    public Articulo articulo { get; set; }

    public int ArticuloId { get; set; }

    private void Nuevo()
    {
        this.articulo = new Articulo();
    }


    protected override void OnInitialized()
    {
        Nuevo();
        Articulo auxProducto;
        if (ArticuloId > 0)
        {
            auxProducto = ArticuloBLL.Buscar(ArticuloId);
            if (auxProducto != null)
                articulo = auxProducto;
            else
                toast.ShowInfo("No encontrado..");
        }
    }
    private void Guardar()
    {
        bool guardar;
        guardar = ArticuloBLL.Guardar(articulo);

        if (guardar)
        {
            Nuevo();
            toast.ShowSuccess("El Articulo se guardo");
        }
        else
        {
            toast.ShowSuccess("Error no Fue posible Guardar");

        }
    }

    private void Calcularinventario()
    {
        articulo.ValorInventario = articulo.Existencia * articulo.Costo;
        
    }

    private void Buscar()
    {
        if (articulo.ArticuloId > 0)
        {
            var encontrado = ArticuloBLL.Buscar(articulo.ArticuloId);
            if (encontrado != null)
            {
                this.articulo = encontrado;
            }
            else
                toast.ShowSuccess("No existe esta Articulo.");
        }
    }

    private void Eliminar()
    {
        bool eliminar;
        eliminar = ArticuloBLL.Eliminar(articulo.ArticuloId);

        if (eliminar)
        {
            Nuevo();
            toast.ShowSuccess("Articulo Eliminada");
        }
        else
        {
            toast.ShowError("La Articulo que intento eliminar no Existe.");

        }
    }



   
}
